[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About The Workshop",
    "section": "",
    "text": "This is a 1/2 day workshop introducing participants to version control using git and the popular code hosting platform, GitHub.\nThe goal of this workshop is to teach data professionals how to harness the power of version control by giving attendees a foundation in the fundamentals of version control with git.\nGitHub is a widely-used platform for hosting and sharing code repositories, facilitating seamless collaboration among developers. Git, on the other hand, is a popular version control system that enables you to track changes in your code, collaborate with team members, and maintain a history of your project’s development."
  },
  {
    "objectID": "index.html#introduction-to-version-control-with-git-and-github",
    "href": "index.html#introduction-to-version-control-with-git-and-github",
    "title": "About The Workshop",
    "section": "",
    "text": "This is a 1/2 day workshop introducing participants to version control using git and the popular code hosting platform, GitHub.\nThe goal of this workshop is to teach data professionals how to harness the power of version control by giving attendees a foundation in the fundamentals of version control with git.\nGitHub is a widely-used platform for hosting and sharing code repositories, facilitating seamless collaboration among developers. Git, on the other hand, is a popular version control system that enables you to track changes in your code, collaborate with team members, and maintain a history of your project’s development."
  },
  {
    "objectID": "index.html#learning-outcomes",
    "href": "index.html#learning-outcomes",
    "title": "About The Workshop",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\nBy the end of this course, you will have gained a fundamental understanding of version control, enabling you to:\n\nSet up a GitHub account and install the software git (pre-workshop)\nUnderstand the value-add of using version control to manage software and code-based data science projects\nUnderstand the basics of how automated version control systems work\nUse git, popular command-line version control software, to track local file changes\nWhat are remote hosting platforms and why do we use them?\nConnect to GitHub, create a remote repository and push local changes to GitHub\nBe familiar with the BC Gov Github Organization which has guidelines and requirements for hosting government developed open source repositories.\n\nThe workshop content will follow best practices for version control such as writing descriptive commit messages, including a .gitignore file and tracking relevent project files."
  },
  {
    "objectID": "index.html#who-should-take-this-course",
    "href": "index.html#who-should-take-this-course",
    "title": "About The Workshop",
    "section": "Who should take this course?",
    "text": "Who should take this course?\n\nAnyone looking to solidify their foundational understanding of version control\nAnyone keen to learn what git or GitHub is (no prior experience necessary!)\nAnyone wondering how version control can be used to manage and collaborate on software and code-based data science projects"
  },
  {
    "objectID": "index.html#workshop-schedule",
    "href": "index.html#workshop-schedule",
    "title": "About The Workshop",
    "section": "Workshop Schedule",
    "text": "Workshop Schedule\n\nDaily Schedule (to be finalized)\n\n\n\n\n\n\n\n\nActivity\nStart Time\nEnd Time\n\n\n\n\nSession 1. What is version control?\n8:45\n9:15\n\n\nSession 2. Working locally with git\n9:15\n10:30\n\n\nBREAK ☕\n10:30\n10:45\n\n\nSession 3. Working remotely with GitHub\n10:45\n11:30\n\n\nSession 4. The BC Gov GitHub Organization\n11:30\n12:15\n\n\n\n\n\nPre-Course Work\nImportant!\nBefore the course starts, we ask that all attendees install git and GitBash and have a basic text editor such as Wordpad, Notepad++, or SublimeText. Instructions for how to install these tools are found in the Introduction to git Section. If anyone is having troubles getting the software up and running, please contact us before the course starts so that we can hit the ground running during the workshop."
  },
  {
    "objectID": "course-outline.html",
    "href": "course-outline.html",
    "title": "Course Outline",
    "section": "",
    "text": "Pre-Workshop Installation and Set Up\nLearning Objective: Set up a GitHub account and install git (pre-workshop).\nInstructions: Installation and Set-Up\nAssignment: Pre-Workshop Assignment\n\nTopics/Learning Outcomes:\n\nDownload Git for Windows and bundled software (includes Git Bash) (PC only)\nDownload Git for Mac installer (Mac only)\nCreate a GitHub account with m2FA, PAT for https connection\nConfigure git\nPre-workshop assignment to show local configuration and connection to GitHub\n\nCourse Reference Material:\n\nSW Carpentry Episode 2. Setting Up Git\nbcgov-r-geo-workshop Lesson 1\n\n\n\nSection 1. Introductions and What is Version Control?\nLearning Objective: Understand the value-add of using version control and the the basics of how automated version control systems work.\nSlides: Section 1 Slides\nTopics:\n\nHow version control systems work\nWhat is a repository?\nWhat is the value-add of using version control in teams? individually?\n\nCourse Reference Material:\n\nSW Carpentry Episode 1. Automated Version Control\n\n\n\nSection 2. Working local with git\nLearning Objective: Use command-line git to track local file changes.\nSlides: Section 2 Slides\nTopics:\n\nDefault branch naming (inclusive language)\nWhat is Bash\nBash-specific commands: mkdir, rm -r, cd, ls\nGit Bash commands: init, commit, add, status, log\nDirectory structure\nTracking changes made to a text doc\nWhat to do when when -m is omitted.\n\nCourse Reference Material:\n\nSW Carpentry Episode 3. Creating a Repository (Local)\nSW Carpentry Episode 4. Tracking Changes\nbcgov-r-geo-workshop Lesson 2\nbcgov-r-geo-workshop Lesson 3\nbcgov-r-geo-workshop Lesson 5\n\n\n\nSection 3. Remote Code Hosting and GitHub\nLearning Objective: What are remote hosting platforms and why do we use them?\nSlides: Section 3 Slides\nTopics:\n\nMore on secure authentication/login: username/password/2FA to sign in to account, PAT to authenticate\nGit Bash commands: push, pull\nCreate a remote repository\nClone a remote repostitory\nPush local changes to GitHub.\n.gitgnore and subdirectories (we don’t want ppl pushing data to GitHub)\n.gitkeep (time permitting)\n\nCourse Reference Material:\n\nSW Carpentry Episode 6. Ignoring Things\nSW Carpentry Episode 7. Remotes in GitHub\nbcgov-r-geo-workshop Lesson 6\nGithub: Keeping your Account and Data Secure\n\n\n\nSection 4\nLearning Objective: Understand how the bcgov framework, policy and related tools help B.C. government employees share code on GitHub\nSlides: Section 4 Slides\nTopics:\n\nwhat is the bcgov organization framework\nbcgov policy framework and licensing\ncode-sharing and teams\nbcgov-c, bcgov enterprise\n\nCourse Reference Material:\n\nSW Carpentry Episode 10. Open Science\nSW Carpentry Episode 11. Licensing)\nSW Carpentry Episode 12. Citation\nSW Carpentry Episode 13. Hosting\n\nFurther Links to BC Gov Organization Resources:\n\nContent Approval Checklist\nBC Gov Organizations in GitHub\nPolicy Framework"
  },
  {
    "objectID": "pre-workshop/software-install.html",
    "href": "pre-workshop/software-install.html",
    "title": "Installion Instructions and Set-Up",
    "section": "",
    "text": "As part of this workshop we will be connecting and pushing some sample code to GitHub, therefore you’ll need to create a GitHub account. In general, creating a GitHub account can be a great way to collaborate on open-source projects, showcase your work, and learn from others.\n\nGo to https://github.com and click “Sign up” at the top-right of the window.\nFollow the step-by-step instructions to create an account.\nVerify your email address with GitHub.\n\nOptional reading: Configuring your GitHub account\n\n\n\nWhen we sign in to GitHub on the web, we are signing into our application account created in step 1. This is where we manage our profile settings, set our passwords, and browse repositories. It is possible to edit repository content from GitHub although editing is typically performed in a local application such as RStudio, VS Code or a text editor. We will go into more detail on that in the course workshop.\n\nGo to https://github.com/ and click “Sign In” (top right corner).\n\nEnter either your username or your email address, and password created in Step 1.\n\n\n\n\nAs of 2023 all GitHub accounts are required to have multi-factor authentication (2FA) configured for extra security. Several options exist for setting up 2FA, the simplest is via text message described below.\n\nIn the upper-right corner of any page, click on your profile photo and select Settings.\nIn the “Access” section of the sidebar, click on Password and authentication.\nScroll down to “Two-factor authentication” section of the page and click Enable two-factor authentication.\nAt the bottom of the page, next to “SMS authentication”, click Select.\nComplete the CAPTCHA challenge, which helps protect against spam and abuse.\nUnder “Setup SMS authentication”, select your country code and type your mobile phone number, including the area code. When your information is correct, click Send authentication code.\nYou’ll receive a text message with a security code. On GitHub, type the code into the field under “Verify the code sent to your phone” and click Continue.\nIf you need to edit the phone number you entered, you’ll need to complete another CAPTCHA challenge.\nUnder “Save your recovery codes”, click Download to download your two-factor recovery codes to your device. Save them to a secure location because your recovery codes can help you get back into your account if you lose access.\nAfter saving your two-factor recovery codes, click “I have saved my recovery codes” to enable two-factor authentication for your account.\n\nOptional reading: Other 2FA configurations.\n\n\n\nTo keep your account secure, you must authenticate before you can access certain resources on GitHub. When we access resources via a browser (as in Step 2) we are authenticating with our username and password and two-factor authentication. In the workshop we will also be accessing GitHub resources via the REST API. You can authenticate with the API in different ways, but the simplest way is with a Classic Personal Access Token (PAT).\nFirst verify your email address (if it hasn’t been verified yet):\n\nIn the upper-right corner of any page, click your profile photo, then click Settings.\nIn the “Access” section of the sidebar, click Emails.\nUnder your email address, click Resend verification email.\nGitHub will send you an email with a link in it. After you click that link, you’ll be taken to your GitHub dashboard and see a confirmation banner.\n\nThen create your PAT:\n\nIn the upper-right corner of any page, click your profile photo, then click Settings.\nIn the left sidebar, click Developer settings.\nIn the left sidebar, under Personal access tokens, click Tokens (classic).\nSelect Generate new token, then click Generate new token (classic).\nIn the “Note” field, give your token a descriptive name.\nTo give your token an expiration date, select Expiration. You have several options, choose what is best for you.\nSelect the scopes you’d like to grant this token. The repo and user boxes should be sufficient for the workshop and most cases in general.\nClick Generate token.\nCopy the new token to your clipboard and save to a text file for later.\n\nOptional reading: Authenticating to the REST API\n\n\n\nGit is a set of command line utility programs that are designed to execute on a Unix style command-line environment. Linux and macOS both include built-in Unix command line terminals. Most likely you are working on a Windows operating system and will require Git Bash, an application for Windows environments which provides an emulation layer for a Git command line experience.\n\n\n\nSearch for “Git Bash” in your start menu to see if Git/GitBash are installed on your computer already.\n\nIf not, navigate to Git for Windows and click “Download” to download Git/GitBash bundled software.\nWhen you’ve successfully started the installer, you should see the Git Setup wizard screen. Follow the Next and Finish prompts to complete the installation. The default options are pretty sensible for most users.\n\n\n\n\nPlease visit: Installing Git and follow the instructions for installing git for MacOSX.\nIf you need more assistance, please reach out to stephanie.hazlitt@gov.bc.ca or bonnie.robert@gov.bc.ca.\n\n\n\n\n\n\nWhen we use Git on a new computer for the first time, we need to configure a few things. Below are a few examples of configurations we will set as we get started with Git:\n\nour name and email address\nand that we want to use these settings globally (i.e. for every project).\n\nOn a command line, Git commands are written as git verb options, where verb is what we actually want to do and options is additional optional information which may be needed for the verb.\n\n\n\nIn our workshop, we will be interacting with GitHub and so our configured email address should be the same as the one used when setting up your GitHub account. Most likely this will be your governement email.\nBelow is an example configuration, please type in the commands using your name and email address.\n$ git config --global user.name \"Bonnie Robert\"\n$ git config --global user.email \"bonnie.robert@gov.bc.ca\"\nIf you are concerned about privacy, please review GitHub’s instructions for keeping your email address private.\n\n\n\nThe two commands we just ran above only need to be run once: the flag --global tells Git to use the settings for every project, in your user account, on this computer.\nYou can check your settings at any time:\n$ git config --list\nYou can change your configuration as many times as you want: use the same commands to update your name or email address.\n\n\n\nAlways remember that if you forget a git command, you can access the list of commands by using -h and access the Git manual by using --help :\n$ git config -h\n$ git config --help\nWhile viewing the manual, remember the : is a prompt waiting for commands and you can press Q to exit the manual."
  },
  {
    "objectID": "pre-workshop/software-install.html#getting-started-with-github",
    "href": "pre-workshop/software-install.html#getting-started-with-github",
    "title": "Installion Instructions and Set-Up",
    "section": "",
    "text": "As part of this workshop we will be connecting and pushing some sample code to GitHub, therefore you’ll need to create a GitHub account. In general, creating a GitHub account can be a great way to collaborate on open-source projects, showcase your work, and learn from others.\n\nGo to https://github.com and click “Sign up” at the top-right of the window.\nFollow the step-by-step instructions to create an account.\nVerify your email address with GitHub.\n\nOptional reading: Configuring your GitHub account\n\n\n\nWhen we sign in to GitHub on the web, we are signing into our application account created in step 1. This is where we manage our profile settings, set our passwords, and browse repositories. It is possible to edit repository content from GitHub although editing is typically performed in a local application such as RStudio, VS Code or a text editor. We will go into more detail on that in the course workshop.\n\nGo to https://github.com/ and click “Sign In” (top right corner).\n\nEnter either your username or your email address, and password created in Step 1.\n\n\n\n\nAs of 2023 all GitHub accounts are required to have multi-factor authentication (2FA) configured for extra security. Several options exist for setting up 2FA, the simplest is via text message described below.\n\nIn the upper-right corner of any page, click on your profile photo and select Settings.\nIn the “Access” section of the sidebar, click on Password and authentication.\nScroll down to “Two-factor authentication” section of the page and click Enable two-factor authentication.\nAt the bottom of the page, next to “SMS authentication”, click Select.\nComplete the CAPTCHA challenge, which helps protect against spam and abuse.\nUnder “Setup SMS authentication”, select your country code and type your mobile phone number, including the area code. When your information is correct, click Send authentication code.\nYou’ll receive a text message with a security code. On GitHub, type the code into the field under “Verify the code sent to your phone” and click Continue.\nIf you need to edit the phone number you entered, you’ll need to complete another CAPTCHA challenge.\nUnder “Save your recovery codes”, click Download to download your two-factor recovery codes to your device. Save them to a secure location because your recovery codes can help you get back into your account if you lose access.\nAfter saving your two-factor recovery codes, click “I have saved my recovery codes” to enable two-factor authentication for your account.\n\nOptional reading: Other 2FA configurations.\n\n\n\nTo keep your account secure, you must authenticate before you can access certain resources on GitHub. When we access resources via a browser (as in Step 2) we are authenticating with our username and password and two-factor authentication. In the workshop we will also be accessing GitHub resources via the REST API. You can authenticate with the API in different ways, but the simplest way is with a Classic Personal Access Token (PAT).\nFirst verify your email address (if it hasn’t been verified yet):\n\nIn the upper-right corner of any page, click your profile photo, then click Settings.\nIn the “Access” section of the sidebar, click Emails.\nUnder your email address, click Resend verification email.\nGitHub will send you an email with a link in it. After you click that link, you’ll be taken to your GitHub dashboard and see a confirmation banner.\n\nThen create your PAT:\n\nIn the upper-right corner of any page, click your profile photo, then click Settings.\nIn the left sidebar, click Developer settings.\nIn the left sidebar, under Personal access tokens, click Tokens (classic).\nSelect Generate new token, then click Generate new token (classic).\nIn the “Note” field, give your token a descriptive name.\nTo give your token an expiration date, select Expiration. You have several options, choose what is best for you.\nSelect the scopes you’d like to grant this token. The repo and user boxes should be sufficient for the workshop and most cases in general.\nClick Generate token.\nCopy the new token to your clipboard and save to a text file for later.\n\nOptional reading: Authenticating to the REST API\n\n\n\nGit is a set of command line utility programs that are designed to execute on a Unix style command-line environment. Linux and macOS both include built-in Unix command line terminals. Most likely you are working on a Windows operating system and will require Git Bash, an application for Windows environments which provides an emulation layer for a Git command line experience.\n\n\n\nSearch for “Git Bash” in your start menu to see if Git/GitBash are installed on your computer already.\n\nIf not, navigate to Git for Windows and click “Download” to download Git/GitBash bundled software.\nWhen you’ve successfully started the installer, you should see the Git Setup wizard screen. Follow the Next and Finish prompts to complete the installation. The default options are pretty sensible for most users.\n\n\n\n\nPlease visit: Installing Git and follow the instructions for installing git for MacOSX.\nIf you need more assistance, please reach out to stephanie.hazlitt@gov.bc.ca or bonnie.robert@gov.bc.ca.\n\n\n\n\n\n\nWhen we use Git on a new computer for the first time, we need to configure a few things. Below are a few examples of configurations we will set as we get started with Git:\n\nour name and email address\nand that we want to use these settings globally (i.e. for every project).\n\nOn a command line, Git commands are written as git verb options, where verb is what we actually want to do and options is additional optional information which may be needed for the verb.\n\n\n\nIn our workshop, we will be interacting with GitHub and so our configured email address should be the same as the one used when setting up your GitHub account. Most likely this will be your governement email.\nBelow is an example configuration, please type in the commands using your name and email address.\n$ git config --global user.name \"Bonnie Robert\"\n$ git config --global user.email \"bonnie.robert@gov.bc.ca\"\nIf you are concerned about privacy, please review GitHub’s instructions for keeping your email address private.\n\n\n\nThe two commands we just ran above only need to be run once: the flag --global tells Git to use the settings for every project, in your user account, on this computer.\nYou can check your settings at any time:\n$ git config --list\nYou can change your configuration as many times as you want: use the same commands to update your name or email address.\n\n\n\nAlways remember that if you forget a git command, you can access the list of commands by using -h and access the Git manual by using --help :\n$ git config -h\n$ git config --help\nWhile viewing the manual, remember the : is a prompt waiting for commands and you can press Q to exit the manual."
  },
  {
    "objectID": "pre-workshop/software-install.html#additional-resources",
    "href": "pre-workshop/software-install.html#additional-resources",
    "title": "Installion Instructions and Set-Up",
    "section": "Additional Resources",
    "text": "Additional Resources\nhttps://github.com/bcgov/BC-Policy-Framework-For-GitHub. Get added to the BC Government GitHub Org (“BCGov”) https://just-ask.developer.gov.bc.ca/"
  },
  {
    "objectID": "01-what-is-vc.html",
    "href": "01-what-is-vc.html",
    "title": "What is Version Control",
    "section": "",
    "text": "rnorm(10)\n\n [1]  0.45915362  0.45955426 -1.01959174 -1.59030573  0.08479894 -0.27485001\n [7]  2.66648332 -0.96667820 -0.92544591  0.45425993"
  },
  {
    "objectID": "01-what-is-vc.html#heres-some-code-to-copy",
    "href": "01-what-is-vc.html#heres-some-code-to-copy",
    "title": "What is Version Control",
    "section": "",
    "text": "rnorm(10)\n\n [1]  0.45915362  0.45955426 -1.01959174 -1.59030573  0.08479894 -0.27485001\n [7]  2.66648332 -0.96667820 -0.92544591  0.45425993"
  }
]