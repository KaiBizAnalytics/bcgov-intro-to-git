---
title: "2. Working Locally with Git"
---

```{r include=FALSE}
knitr::opts_chunk$set(eval = FALSE)
```

## 2.1 **Creating a Repository**

First, let's create a new directory in the `Desktop` folder for our work and then change the current working directory to the newly created one:

```{bash}
$ cd ~/Desktop
$ mkdir planets
$ cd planets
```

Then we tell Git to make `planets` a [repository](https://swcarpentry.github.io/git-novice/reference.html#repository) \-- a place where Git can store versions of our files:

```{bash}
$ git init
```

It is important to note that `git init` will create a repository that can include subdirectories and their files---there is no need to create separate repositories nested within the `planets` repository, whether subdirectories are present from the beginning or added later. Also, note that the creation of the `planets` directory and its initialization as a repository are completely separate processes.

If we use `ls` to show the directory's contents, it appears that nothing has changed:

```{bash}
$ ls
```

But if we add the `-a` flag to show everything, we can see that Git has created a hidden directory within `planets` called `.git`:

```{bash}
$ ls -a
```

We get the following output:

```{bash}
.   ..  .git
```

Git uses this special subdirectory to store all the information about the project, including the tracked files and sub-directories located within the project's directory. If we ever delete the `.git`subdirectory, we will lose the project's history.

Next, we will change the default branch to be called `main`. This might be the default branch depending on your settings and version of git. See the [setup episode](https://swcarpentry.github.io/git-novice/02-setup.html#default-git-branch-naming) for more information on this change.

```{bash}
$ git checkout -b main
```

We get the following output:

```{bash}
Switched to a new branch 'main'
```

We can check that everything is set up correctly by asking Git to tell us the status of our project:

```{bash}
$ git status
```

We get the following output:

```{bash}
On branch main

No commits yet

nothing to commit (create/copy files and use "git add" to track)
```

If you are using a different version of `git`, the exact wording of the output might be slightly different.

## 2.2 Tracking Files

First let's make sure we're still in the right directory. You should be in the `planets` directory.

```{bash}
$ cd ~/Desktop/planets
```

Let's create a file called `mars.txt` that contains some notes about the Red Planet's suitability as a base. Open a new document named `mars.txt` using a plain text editor such as Notepad++. Type the text below:

```{bash}
Cold and dry, but everything is my favorite color
```

After switching back to the GitBash command-line interface, let's verify that the file was properly created by running the list command (`ls`):

```{bash}
$ ls
```

We should see the following file in our directory:

```{bash}
mars.txt
```

`mars.txt` contains a single line, which we can verify by running:

```{bash}
$ cat mars.txt
```

```{bash}
Cold and dry, but everything is my favorite color
```

If we check the status of our project again, Git tells us that it's noticed the new file:

```{bash}
$ git status
```

```{bash}
On branch main

No commits yet

Untracked files:
   (use "git add <file>..." to include in what will be committed)

    mars.txt

nothing added to commit but untracked files present (use "git add" to track)
```

The "untracked files" message means that there's a file in the directory that Git isn't keeping track of. We can tell Git to track a file using `git add`:

```{bash}
$ git add mars.txt
```

and then check that the right thing happened:

```{bash}
$ git status
```

```{bash}
On branch main

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

    new file:   mars.txt
```

## 2.3 Committing Changes

Git now knows that it's supposed to keep track of `mars.txt`, but it hasn't recorded these changes as a commit yet. To get it to do that, we need to run one more command:

```{bash}
$ git commit -m "Start notes on Mars as a base"
```

```{bash}
[main (root-commit) f22b25e] Start notes on Mars as a base
 1 file changed, 1 insertion(+)
 create mode 100644 mars.txt
```

When we run `git commit`, Git takes everything we have told it to save by using `git add` and stores a copy permanently inside the special `.git` directory. This permanent copy is called a [commit](https://swcarpentry.github.io/git-novice/reference.html#commit) (or [revision](https://swcarpentry.github.io/git-novice/reference.html#revision)) and its short identifier is `f22b25e`. Your commit may have another identifier.

We use the `-m` flag (for "message") to record a short, descriptive, and specific comment that will help us remember later on what we did and why.

::: callout-note
If we just run `git commit` without the `-m` option, Git will launch a utility program called `nano`  and ask us to write a longer message. If this happens, click `CTRL+X` to go back to the command line and run `git commit -m "your commit message"`.
:::

::: callout-note
[Good commit messages](https://chris.beams.io/posts/git-commit/) start with a brief (\<50 characters) statement about the changes made in the commit. Generally, the message should complete the sentence "If applied, this commit will" . If you want to go into more detail, add a blank line between the summary line and your additional notes. Use this additional space to explain why you made changes and/or what their impact will be.
:::

If we run `git status` now:

```         
$ git status
```

```         
On branch main
nothing to commit, working tree clean
```

it tells us everything is up to date.

## Our Commit History

If we want to know what we've done recently, we can ask Git to show us the project's history using `git log`:

```         
$ git log
```

```         
commit f22b25e3233b4645dabd0d81e651fe074bd8e73b
Author: Vlad Dracula <vlad@tran.sylvan.ia>
Date:   Thu Aug 22 09:51:46 2013 -0400

    Start notes on Mars as a base
```

`git log` lists all commits made to a repository in reverse chronological order. The listing for each commit includes the commit's full identifier (which starts with the same characters as the short identifier printed by the `git commit` command earlier), the commit's author, when it was created, and the log message Git was given when the commit was created.

let's add more information to the file. (Again, open up your text editor to add and save your changes. Switch back to command line when you're finished.

```         
$ cat mars.txt
```

```         
Cold and dry, but everything is my favorite color
The two moons may be a problem for Wolfman
```

When we run `git status` now, it tells us that a file it already knows about has been modified:

```         
$ git status
```

```         
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   mars.txt

no changes added to commit (use "git add" and/or "git commit -a")
```

The last line is the key phrase: "no changes added to commit". We have changed this file, but we haven't told Git we will want to save those changes (which we do with `git add`) nor have we saved them (which we do with `git commit`).

After reviewing our change, it's time to commit it:

```         
$ git add mars.txt
$ git commit -m "Add concerns about effects of Mars' moons on Wolfman"
```

```         
[main 34961b1] Add concerns about effects of Mars' moons on Wolfman
 1 file changed, 1 insertion(+)
```

Git insists that we add files to the set we want to commit before actually committing anything. This allows us to commit our changes in stages and capture changes in logical portions rather than only large batches. For example, suppose we're adding a few citations to relevant research to our thesis. We might want to commit those additions, and the corresponding bibliography entries, but *not*commit some of our work drafting the conclusion (which we haven't finished yet).

## Staging Area

To allow for this, Git has a special *staging area* where it keeps track of things that have been added to the current [changeset](https://swcarpentry.github.io/git-novice/reference.html#changeset) but not yet committed.

If you think of Git as taking snapshots of changes over the life of a project, git add specifies what will go in a snapshot (putting things in the staging area), and git commit then actually takes the snapshot, and makes a permanent record of it (as a commit). If you don't have anything staged when you type git commit, Git will prompt you to use git commit -a or git commit --all, which is kind of like gathering everyone to take a group photo! However, it's almost always better to explicitly add things to the staging area, because you might commit changes you forgot you made. (Going back to the group photo simile, you might get an extra with incomplete makeup walking on the stage for the picture because you used -a!) Try to stage things manually, or you might find yourself searching for "git undo commit" more than you would like!

![The Git Staging Area](./figures/tracking-changes.png)
